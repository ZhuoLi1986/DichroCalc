#!/usr/bin/perl -w

####################################################################################################
#
# Program:    angle
#
# Function:   Calculates the angle between two 3D vectors
#
# Author:     Benjamin Bulheller
#
# Version:    $Revision: 2945 $, $Date: 2008-04-28 17:13:10 +0100 (Mon, 28 Apr 2008) $
#
# Date:       March 2007
#
####################################################################################################

use strict;                          # always use this!!!
use Data::Dumper;                    # for easy printout of arrays and hashes
use FindBin qw/$Bin/;                # sets $Bin to the directory of the script
use lib $Bin;                        # add the script's directory to the library path
use lib "$ENV{HOME}/bin/perllib/";   # adds ~/bin/perllib to the library path
use DebugPrint;                      # handy during debugging
use VectorMath;                      # for vector calculations
use GetParameters;                   # to handle command line parameters

###################################################################################################
# Configuration for GetParameters
####################################################################################################

my $Parameters = {     # create an anonymous hash
	o  =>  "list[3]",
};

my $Options = {       # create an anonymous hash
};

my $Help = 
"\n" .
"Usage:  angle x1 y1 z1 x2 y2 z2 [-o x y z]\n\n" .
"        -o   define an \"origin\" different from 0, 0, 0\n" .
"\n";

####################################################################################################

GetParameters ($Parameters, $Options, $Help);

my ($Vector1, $Vector2);

if (not $Options->{rest} or scalar @{$Options->{rest}} < 6) {
	print $Help;
	exit 1;
}

# if no origin is give, take 0, 0, 0 as default
if (not $Options->{o}) { $Options->{o} = [0, 0, 0] }

$Vector1->{x} = $Options->{rest}[0] - $Options->{o}[0];
$Vector1->{y} = $Options->{rest}[1] - $Options->{o}[1];
$Vector1->{z} = $Options->{rest}[2] - $Options->{o}[2];

$Vector2->{x} = $Options->{rest}[3] - $Options->{o}[0];
$Vector2->{y} = $Options->{rest}[4] - $Options->{o}[1];
$Vector2->{z} = $Options->{rest}[5] - $Options->{o}[2];

printf "\n%9.4f\n\n", Angle ($Vector1, $Vector2);


